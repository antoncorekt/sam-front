/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AccountMap;
import io.swagger.model.AccountMapLog;
import io.swagger.model.FinancialAccount;
import io.swagger.model.InlineResponse201;
import org.springframework.web.bind.annotation.*;
import org.threeten.bp.OffsetDateTime;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-30T09:02:23.196Z")

@Api(value = "account", description = "the account API")
public interface AccountApi {

    @ApiOperation(value = "Add a new SAP OFI account to dictionary", nickname = "addOFI", notes = "", tags={ "ofi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 409, message = "Duplicated account number") })
    @RequestMapping(value = "/account/ofi",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addOFI(@ApiParam(value = "Financial Account that needs to be added to the dictionary" ,required=true )  @Valid @RequestBody FinancialAccount body);


    @ApiOperation(value = "Remove SAP OFI account", nickname = "deleteOFI", notes = "Removes an existing OFI account from the dictionary. Only accounts which are not used in any mapping may be removed.", tags={ "ofi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/account/ofi/{accountId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOFI(@ApiParam(value = "ID of OFI account",required=true) @PathVariable("accountId") Long accountId,@ApiParam(value = "Financial Account that needs to be added to the dictionary" ,required=true )  @Valid @RequestBody FinancialAccount body);


    @ApiOperation(value = "Return list of BSCS GL accounts", nickname = "getAllGL", notes = "", response = FinancialAccount.class, responseContainer = "List", tags={ "gl", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FinancialAccount.class, responseContainer = "List") })
    @RequestMapping(value = "/account/gl",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<FinancialAccount>> getAllGL(@ApiParam(value = "Account status filter", allowableValues = "active, inactive, all", defaultValue = "active") @Valid @RequestParam(value = "status", required = false, defaultValue="active") String status);


    @CrossOrigin
    @ApiOperation(value = "Return list of SAP OFI accounts", nickname = "getAllOFI", notes = "", response = FinancialAccount.class, responseContainer = "List", tags={ "ofi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FinancialAccount.class, responseContainer = "List") })
    @RequestMapping(value = "/account/ofi",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<FinancialAccount>> getAllOFI(@ApiParam(value = "Account status filter", allowableValues = "active, inactive, all", defaultValue = "active") @Valid @RequestParam(value = "status", required = false, defaultValue="active") String status);


    @ApiOperation(value = "Return BSCS GL account by ID", nickname = "getGL", notes = "Returns a single BSCS GL account", response = FinancialAccount.class, tags={ "gl", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FinancialAccount.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Account not found") })
    @RequestMapping(value = "/account/gl/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FinancialAccount> getGL(@Size(max=30) @ApiParam(value = "ID of GL account",required=true) @PathVariable("accountId") String accountId);


    @ApiOperation(value = "Return account mapping", nickname = "getMap", notes = "", response = AccountMap.class, responseContainer = "List", tags={ "account map", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccountMap.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameter supplied") })
    @RequestMapping(value = "/account/map",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AccountMap>> getMap(@ApiParam(value = "Entry status filter", allowableValues = "approved, unapproved, all", defaultValue = "all") @Valid @RequestParam(value = "status", required = false, defaultValue="all") String status,@ApiParam(value = "BSCS GL account number") @Valid @RequestParam(value = "glAccount", required = false) String glAccount,@ApiParam(value = "SAP OFI account number") @Valid @RequestParam(value = "ofiAccount", required = false) String ofiAccount);


    @ApiOperation(value = "Return history of changes in account mapping", nickname = "getMapLog", notes = "", response = AccountMapLog.class, responseContainer = "List", tags={ "account map", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AccountMapLog.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid parameter supplied") })
    @RequestMapping(value = "/account/map/history",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AccountMapLog>> getMapLog(@ApiParam(value = "Lower change date boundary.") @Valid @RequestParam(value = "dateFrom", required = false) OffsetDateTime dateFrom,@ApiParam(value = "Upper change date boundary.") @Valid @RequestParam(value = "dateTo", required = false) OffsetDateTime dateTo,@ApiParam(value = "User introducing the change") @Valid @RequestParam(value = "user", required = false) String user,@ApiParam(value = "BSCS GL account number") @Valid @RequestParam(value = "glAccount", required = false) String glAccount,@ApiParam(value = "SAP OFI account number") @Valid @RequestParam(value = "ofiAccount", required = false) String ofiAccount);


    @ApiOperation(value = "Return SAP OFI account by ID", nickname = "getOFI", notes = "Returns a single SAP OFI account", response = FinancialAccount.class, tags={ "ofi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = FinancialAccount.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Account not found") })
    @RequestMapping(value = "/account/ofi/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FinancialAccount> getOFI(@ApiParam(value = "ID of OFI account",required=true) @PathVariable("accountId") Long accountId);


    @ApiOperation(value = "Import SAP OFI accounts from a file", nickname = "importOFI", notes = "", response = InlineResponse201.class, tags={ "ofi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = InlineResponse201.class),
        @ApiResponse(code = 405, message = "Invalid input file") })
    @RequestMapping(value = "/account/import/ofi",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> importOFI(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file);


    @ApiOperation(value = "Update SAP OFI account", nickname = "updateOFI", notes = "Updates an existing SAP OFI account", tags={ "ofi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/account/ofi/{accountId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateOFI(@ApiParam(value = "ID of OFI account",required=true) @PathVariable("accountId") Long accountId,@ApiParam(value = "Financial Account that needs to be added to the dictionary" ,required=true )  @Valid @RequestBody FinancialAccount body);

}
