/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.MarketSegment;
import io.swagger.model.MarketSegmentReq;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-30T09:02:23.196Z")

@Api(value = "segment", description = "the segment API")
public interface SegmentApi {

    @ApiOperation(value = "Add a new market segment to dictionary", nickname = "addSegment", notes = "", tags={ "segment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success"),
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 409, message = "Duplicated segment name") })
    @RequestMapping(value = "/segment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addSegment(@ApiParam(value = "Market Segment that needs to be added to the dictionary" ,required=true )  @Valid @RequestBody MarketSegmentReq body);


    @ApiOperation(value = "Remove an existing market segment", nickname = "deleteSegment", notes = "Removes an existing market segment from the dictionary. Only markets which are not used in any mapping may be removed.", tags={ "segment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Segment not found"),
        @ApiResponse(code = 405, message = "Cannot remove used market segment") })
    @RequestMapping(value = "/segment/{segmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSegment(@ApiParam(value = "",required=true) @PathVariable("segmentId") String segmentId);


    @ApiOperation(value = "Return list of Market Segments", nickname = "getAllSegments", notes = "", response = MarketSegment.class, responseContainer = "List", tags={ "segment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MarketSegment.class, responseContainer = "List") })
    @RequestMapping(value = "/segment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MarketSegment>> getAllSegments();


    @ApiOperation(value = "Return a single Market Segment", nickname = "getSegment", notes = "", response = MarketSegment.class, tags={ "segment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MarketSegment.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Segment not found") })
    @RequestMapping(value = "/segment/{segmentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MarketSegment> getSegment(@ApiParam(value = "",required=true) @PathVariable("segmentId") String segmentId);

}
