/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.RequestSetAccountDictBscs;
import io.swagger.model.RequestSetAccountDictSap;
import io.swagger.model.RequestSetSegment;
import io.swagger.model.ResultSetAccountDictBscs;
import io.swagger.model.ResultSetAccountDictBscss;
import io.swagger.model.ResultSetAccountDictSap;
import io.swagger.model.ResultSetAccountDictSaps;
import io.swagger.model.ResultSetCount;
import io.swagger.model.ResultSetError;
import io.swagger.model.ResultSetSegment;
import io.swagger.model.ResultSetSegments;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-09-06T13:08:35.508Z")

@Api(value = "dictionary", description = "the dictionary API")
public interface DictionaryApi {

    @ApiOperation(value = "deleteAccountDictBscs", nickname = "dictionaryAccountBscsDelete", notes = "Unselective cleanup of the configuration. Used in bulk load.  Requires: - Admin role.", response = ResultSetCount.class, tags={ "dictionary-account-bscs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetCount.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/account/bscs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<ResultSetCount> dictionaryAccountBscsDelete(@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) UUID xRequestID);


    @ApiOperation(value = "readAccountDictBscs", nickname = "dictionaryAccountBscsGet", notes = "The whole configuration is read from the backend.", response = ResultSetAccountDictBscss.class, tags={ "dictionary-account-bscs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetAccountDictBscss.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/account/bscs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ResultSetAccountDictBscss> dictionaryAccountBscsGet(@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) UUID xRequestID);


    @ApiOperation(value = "createAccountDictBscs", nickname = "dictionaryAccountBscsPost", notes = "Only one description is created in the configuration. Requires Admin role.", response = ResultSetAccountDictBscs.class, tags={ "dictionary-account-bscs", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetAccountDictBscs.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/account/bscs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ResultSetAccountDictBscs> dictionaryAccountBscsPost(@ApiParam(value = "Structure of the objects to be create with all fields to be populated" ,required=true )  @Valid @RequestBody RequestSetAccountDictBscs body);


    @ApiOperation(value = "deleteAccountDictSap", nickname = "dictionaryAccountSapDelete", notes = "Unselective cleanup of the configuration. Used in bulk load.  Requires: - Admin role.", response = ResultSetCount.class, tags={ "dictionary-account-sap", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetCount.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/account/sap",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<ResultSetCount> dictionaryAccountSapDelete(@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) UUID xRequestID);


    @ApiOperation(value = "readAccountDictSap", nickname = "dictionaryAccountSapGet", notes = "The whole configuration is read from the backend.", response = ResultSetAccountDictSaps.class, tags={ "dictionary-account-sap", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetAccountDictSaps.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/account/sap",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ResultSetAccountDictSaps> dictionaryAccountSapGet(@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) UUID xRequestID);


    @ApiOperation(value = "createAccountDictSap", nickname = "dictionaryAccountSapPost", notes = "Only one description is created in the configuration.   Requires: - Admin role.", response = ResultSetAccountDictSap.class, tags={ "dictionary-account-sap", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetAccountDictSap.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/account/sap",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ResultSetAccountDictSap> dictionaryAccountSapPost(@ApiParam(value = "Structure of the objects to be create with all fields to be populated" ,required=true )  @Valid @RequestBody RequestSetAccountDictSap body,@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) UUID xRequestID);


    @ApiOperation(value = "deleteSegment", nickname = "dictionarySegmentDelete", notes = "Unselective cleanup of the configuration.  Requires: - Admin role.", response = ResultSetCount.class, tags={ "dictionary-segment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetCount.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/segment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<ResultSetCount> dictionarySegmentDelete(@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) UUID xRequestID);


    @ApiOperation(value = "readSegment", nickname = "dictionarySegmentGet", notes = "The whole configuration is read from the backend.", response = ResultSetSegments.class, tags={ "dictionary-segment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetSegments.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/segment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ResultSetSegments> dictionarySegmentGet(@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) UUID xRequestID);


    @ApiOperation(value = "createSegment", nickname = "dictionarySegmentPost", notes = "Only one segment is created in the configuration.   Requires: - Admin role", response = ResultSetSegment.class, tags={ "dictionary-segment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = ResultSetSegment.class),
        @ApiResponse(code = 401, message = "Not authenticated", response = ResultSetError.class),
        @ApiResponse(code = 200, message = "Server error", response = ResultSetError.class) })
    @RequestMapping(value = "/dictionary/segment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ResultSetSegment> dictionarySegmentPost(@ApiParam(value = "Structure of the objects to be create with all fields to be populated." ,required=true )  @Valid @RequestBody RequestSetSegment body,@ApiParam(value = "" ) @RequestHeader(value="X-Request-ID", required=false) UUID xRequestID);

}
